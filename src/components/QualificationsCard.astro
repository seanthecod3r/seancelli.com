---
interface QualificationsCard {
  title: string;
  subtitle: string;
  timeSpent: string;
}

const { title, subtitle, timeSpent } = Astro.props;
---

<div class="qualification-card flex items-center left-[-7px] relative">
  <span
    class="bg-secondary w-4 h-4 rounded-full border-[3px] border-primary flex-none"
  ></span>
  <span class="min-w-3 h-[3px] bg-primary"></span>
  <div
    class="bg-secondary flex-grow min-h-[70px] border rounded-lg border-l-primary border-l-[3px]"
  >
    <div class="p-3 font-main-font">
      <span class="font-bold text-sm md:text-md flex-shrink-0">{title}</span>
      <div class="flex text-xs md:text-sm gap-2 items-center">
        <span class="text-primary font-semibold">{subtitle}</span>
        <span>|</span>
        <span class="text-nowrap">{timeSpent}</span>
      </div>
    </div>
  </div>
</div>

<script>
  function handleIntersect(entries: any, observer: any) {
    entries.forEach((entry: any) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("animate-slideIn");
        observer.unobserve(entry.target);
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const options = {
      threshold: 0.1,
    };

    const observer = new IntersectionObserver(handleIntersect, options);

    const cards = document.querySelectorAll(".qualification-card");
    cards.forEach((card) => {
      observer.observe(card);
    });
  });
</script>
